#encoding:utf-8

def check (xid, other_cond={}):
    cond = {}
    cond['id'] = xid
    cond['user_id'] = get_user()

    if other_cond:
        cond.update (other_cond)

    if not m_user.exists (**cond):
        return False

    return True

def get_user ():
    return session.get('user_id')

def default_error ():
    raise web.notfound()

class {{{{name}}}}_list:
    
    @user_login
    def GET(self):
        request = web.input()
        index  = request.get('index',  '0').strip()
        length = request.get('length', '10') .strip()
        assert (str(index).isdigit())
        assert (str(length).isdigit())
        
        cond = {}
        cond['user_id'] = get_user()
        
        fields = {{{{fields}}}}
        
        for field in fields :
            if request.get(field,''):
                cond[field] = request.get(field).strip()
        
        data_list = m_{{{{name}}}}.query (index, length, **cond)


class {{{{name}}}}_read:
    @user_login
    def GET(self, xid):
        assert (str(xid).isdigit())
        if check (xid):
            print 'try to read an unauthrithm data, %s record id:%s , user id:%s'  %  ({{{{name}}}},xid, get_user())
            raise web.notfound()
        
        data = {}
        data['item'] = m_{{{{name}}}}.get_by_id ({"key":"id", "value": int(xid)})
        return render ('{{{{name}}}}_read.html', data = data)
        

class {{{{name}}}}_edit:
    @user_login
    def GET(self,xid):
        assert (str(xid).isdigit())
        if not check (xid):
            print 'try to edit an unauthrithm data, %s record id:%s , user id:%s'  %  ({{{{name}}}},xid, get_user())
            raise web.notfound()
        
        data = {}
        data['item'] = m_{{{{name}}}}.get_by_id ({"key":"id", "value": int(xid)})
        return render ('{{{{name}}}}_edit.html', data = data)
        

    @need_login
    def POST(self):
        request = web.input()
        xid = request.get('xid','0')
        
        if not check (xid):
            print 'try to save an unauthrithm data, %s record id:%s , user id:%s'  %  ({{{{name}}}},xid, get_user())
            raise web.notfound()
        
        


class {{{{name}}}}_delete:

    @user_login
    def GET(self, xid):
        assert (str(xid).isdigit())
        cond = {}
        cond['id'] = int(xid)
        if not check (xid):
            print 'try to delete an unauthrithm data, %s record id:%s , user id:%s'  %  ({{{{name}}}},xid, get_user())
            raise web.notfound()
        m_{{{{name}}}}.delete_one (**cond)
        return web.seeOther('{{{{url}}}}')
        





