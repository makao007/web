#encoding:utf-8

'''  database 
table primary key : id int primary key auto_increment
each record add a field  user_id to tag which user to create it
'''


def replace_template (content, data):
    content = content.decode('utf8')
    for k,v in data.iteritems():

        content = content.replace(  '{{{{'+k+'}}}}',  v )

    return content


def write_file (filename, content):
    content = content.encode('utf8')
    w = open(filename, 'w')
    w.write(content)
    w.close()


def gene_sql(data):

    fields = []
    for item in data.get('fields'):
        t_null = '' if item.get('null').lower().strip()=='y' else 'not null'
        t_default = '' if not item.get('default') else ('default ' + str(item.get('default')))

        temp = '%s %s %s %s'  % (item.get('name'), item.get('type'), t_null, t_default)

        fields.append (temp)
    sql = '''create table %s (id int primary key auto_increment, %s) ''' % (data.get('table_name'), ','.join(fields))
    return sql

def gene_html (data):

    def load_data ():
        info = {}
        info['title'] = data.get('title')
        info['sub_title'] = data.get('sub_title')
        info['url'] = data.get('url')


        temp1 = ''    #for filter search
        temp2 = ''    #for data show title
        temp3 = ''    #for data show field name
        temp4 = ''    #for add info
        for x in data.get('fields'):
            temp1 += "\n<label>%s</label><input type='text' name='%s' value='' >"  %  \
                           (x.get('title'), data.get('name') + '_' + x.get('name') )

            temp2 += '<th>%s</th>'  % x.get('title')

            temp3 += '<td>{{item.get("%s")}}</td>\n'   %   x.get('name')


            temp4 += '\n<div class="item_input"><label>%s</label><input type="text" class="basic_input" name="%s_%s"></div>' % (x.get('title'), data.get('name'),x.get('name'))

        info['filter_fields'] = temp1
        info['field_names']   = temp2
        info['loop_fields'] = temp3
        info['add_fields']  = temp4
        return info

    def gene_list(data):
        info = load_data()

        template = file('template/tpl_list.html').read()
        content  = replace_template (template, info)

        write_file ('gene/'+data.get('name') + '_list.html', content)

    def gene_edit (data):
        info = load_data()
        template = file('template/tpl_edit.html').read()
        content = replace_template (template, info)
        write_file ('gene/' + data.get('name') + '_edit.html', content)


    gene_list (data)
    gene_edit(data)
    
    gene_py (data)


def gene_py (data):
    def load_data ():
        info = {}
        info['url']  = data.get('url')
        info['name'] = data.get('name')
        info['fields'] = str([ item.get('name') for item in data.get('fields') ])
        return info
    
    info = load_data()

    template = file('template/tpl_view.py').read()
    content  = replace_template (template, info)

    write_file ('gene/'+data.get('name') + '_view.py', content)
    

def gene (data):
    gene_sql(data)
    gene_html(data)
    gene_py(data)


if __name__ == "__main__":
    test_item = {
        'name'   :   'user',
        'title'  :  u'用户',
        'sub_title':u'用户',
        'url': '/admin/user',
        'remark':u'集团内部的用户不会外开放使用,员工帐号',
        'table_name': 'Usr',
        'fields':[
            {'name':'uid',  'null':'n', 'title':u'用户ID',  'type':'varchar(20)',   'default':''},
            {'name':'code', 'null':'n', 'title':u'编号',    'type':'varchar(20)',   'default':''},
            {'name':'name', 'null':'n', 'title':u'姓名',    'type':'varchar(20)',   'default':''},
            {'name':'role', 'null':'n', 'title':u'角色',    'type':'tinyint',       'default':1},
            {'name':'area', 'null':'y', 'title':u'区域',    'type':'tinyint',       'default':1},
        ],
    }
    gene (test_item)
    print 'done'
